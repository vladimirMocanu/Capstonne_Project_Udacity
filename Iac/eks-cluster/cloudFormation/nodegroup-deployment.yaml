AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS nodes (AMI family: AmazonLinux2, SSH access: true, private networking:
  false) [created and managed by eksctl]
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  EgressInterCluster:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-2
        (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !ImportValue "eksctl-cluster-1-cluster::SecurityGroup"
      IpProtocol: tcp
      ToPort: 65535
  EgressInterClusterAPI:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group ng-2
        (workloads using HTTPS port, commonly used with extension API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !ImportValue "eksctl-cluster-1-cluster::SecurityGroup"
      IpProtocol: tcp
      ToPort: 443
  IngressInterClusterCP:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        ng-2
      FromPort: 443
      GroupId: !ImportValue "eksctl-cluster-1-cluster::SecurityGroup"
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443
  NodeGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      DesiredCapacity: "1"
      LaunchTemplate:
        LaunchTemplateName: !Sub "${AWS::StackName}"
        Version: !GetAtt
          - NodeGroupLaunchTemplate
          - LatestVersionNumber
      MaxSize: "1"
      MinSize: "1"
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value: cluster-1-ng-2-Node
        - Key: kubernetes.io/cluster/cluster-1
          PropagateAtLaunch: "true"
          Value: owned
      VPCZoneIdentifier: !Split
        - ","
        - !ImportValue "eksctl-cluster-1-cluster::SubnetsPublic"
    UpdatePolicy:
      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt
            - NodeInstanceProfile
            - Arn
        ImageId: ami-0c6f20e00e2f5869a
        InstanceType: m5.large
        KeyName: eksctl-cluster-1
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !ImportValue "eksctl-cluster-1-cluster::SharedNodeSecurityGroup"
              - !Ref SG
            NetworkCardIndex: 0
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cluster-1-ng-2-Node
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: cluster-1-ng-2-Node
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: cluster-1-ng-2-Node
        UserData: >-
          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
      LaunchTemplateName: !Sub "${AWS::StackName}"
  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref "AWS::Partition"
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Path: /
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/NodeInstanceRole"
  SG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Communication between the control plane and worker nodes in group ng-2
      SecurityGroupIngress:
        - Description: >-
            [IngressInterCluster] Allow worker nodes in group ng-2 to
            communicate with control plane (kubelet and workload TCP ports)
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue "eksctl-cluster-1-cluster::SecurityGroup"
          ToPort: 65535
        - Description: >-
            [IngressInterClusterAPI] Allow worker nodes in group ng-2 to
            communicate with control plane (workloads using HTTPS port, commonly
            used with extension API servers)
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !ImportValue "eksctl-cluster-1-cluster::SecurityGroup"
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow SSH access to worker nodes in group ng-2
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIpv6: "::/0"
          Description: Allow SSH access to worker nodes in group ng-2
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: kubernetes.io/cluster/cluster-1
          Value: owned
        - Key: Name
          Value: !Sub "${AWS::StackName}/SG"
      VpcId: !ImportValue "eksctl-cluster-1-cluster::VPC"
Outputs:
  FeatureLocalSecurityGroup:
    Value: true
  FeaturePrivateNetworking:
    Value: false
  FeatureSharedSecurityGroup:
    Value: true
  InstanceProfileARN:
    Value: !GetAtt
      - NodeInstanceProfile
      - Arn
    Export:
      Name: !Sub "${AWS::StackName}::InstanceProfileARN"
  InstanceRoleARN:
    Value: !GetAtt
      - NodeInstanceRole
      - Arn
    Export:
      Name: !Sub "${AWS::StackName}::InstanceRoleARN"
