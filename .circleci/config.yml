version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.0

jobs:
    build-macOS:
      macos:
        xcode: "14.2.0"
      steps:
        - checkout
        - run:
            name: Test xcode
            command: |
              xcodebuild -version
              xcodebuild -showsdks
              xcrun
        - run: 
            name: Install Homebrew
            command: |
              python3 --version
              ping -c 3 google.com

  # check-code:
  #   docker:
  #     - image: cimg/python:3.7
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install lint + run lint
  #         command: |
  #           make setup
  #           # python3 -m venv venv
  #           # . venv/bin/activate
  #           make install
  #           make lint

  # push-docker-image:
  #   docker:
  #     - image: cimg/go:1.17
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         version: 20.10.14
  #         docker_layer_caching: true
  #     - run:
  #         name: Build + upload docker image
  #         command: |
  #           docker build --tag=app_udacity .
  #           docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
  #           docker tag app_udacity $DOCKERHUB_USERNAME/app_udacity
  #           docker push $DOCKERHUB_USERNAME/app_udacity

  # create-eks-cluster:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install eksctl + create EKS cluster
  #         command: |
  #           apk add --update tar gzip  curl
  #           curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
  #           mv /tmp/eksctl /usr/local/bin
  #           eksctl create cluster --name=eksCluster-${CIRCLE_WORKFLOW_ID:0:7} --zones us-east-1a,us-east-1b,us-east-1c

  # deploy-eks-cluster:
  #   docker:
  #     - image: cimg/python:3.7
  #       user: root
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         docker_layer_caching: true
  #     - run:
  #         name: Install awscli
  #         command: |
  #           echo "----------------------------------------Install awscli-------------------------------------"
  #           sudo apt -y install tar gzip unzip curl
  #           sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           sudo unzip awscliv2.zip
  #           sudo ./aws/install
  #     - run:
  #         name: Install kubectl
  #         command: |
  #           echo "----------------------------------------Install kubectl-----------------------------------"
  #           curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  #           sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
  #           kubectl version --client
  #     - run:
  #         name: Pull docker + update config
  #         command: |
  #           echo "-------------------------------------Pull docker + update config----------------------------"
  #           # deploy cluster
  #           aws eks update-kubeconfig --name eksCluster-${CIRCLE_WORKFLOW_ID:0:7}
  #           docker pull $DOCKERHUB_USERNAME/app_udacity
  #     - run:
  #         name: Deploy eks to cluster
  #         command: |
  #           echo "--------------------------------------- Deploy eks to cluster------------------------------"
  #           # kubectl port-forward 8080:80
  #           kubectl create namespace app-deployment
  #           kubectl apply -f eks-cluster/eks-deployment.yaml
  #           kubectl apply -f eks-cluster/eks-service.yaml
  #     - run:
  #         name: Verify + Rollout
  #         command: |
  #           echo "---------------------------------------------Verify-----------------------------------------"
  #           kubectl get all -n app-deployment
  #           kubectl -n app-deployment describe service app-deployment
  #           kubectl get deployments
  #           echo "---------------------------------------------Rollout-----------------------------------------"
  #           kubectl rollout restart deployment app-deployment -n app-deployment
workflows:
  default:
    jobs:
        - build-macOS
      # - check-code
      # - push-docker-image:
      #     requires: [check-code]
      # - create-eks-cluster:
      #     requires: [push-docker-image]
      # - deploy-eks-cluster:
      #     requires: [create-eks-cluster]
